Q1

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>
void sequential(){
double arr1[10000],arr2[10000];
        double temp = 0;
        double start1 = omp_get_wtime();
        for(int i=0;i<10000;i++){
        arr1[i]= i +2.0;
        }
	for(int i=10000;i>0;i--){
        arr2[i] = i+4.0;
        }
        double end1 = omp_get_wtime();
        double start2 = omp_get_wtime();
        for(int i=0;i<10000;i++){
        double tempdot = arr1[i] * arr2[i];
        temp = temp + tempdot;
        }
        double end2 = omp_get_wtime();
        printf("Scaler sum %f\n",temp);
        printf("First For Loop Time1 %f\n",end1-start1);
        printf("Second For Loop Time2 %f\n",end2-start2);
        printf("Total Time for sequential Execution %f\n",(end2-start2) + (end1-start1));S
}
int main(){
	sequential();
	double arr1[10000],arr2[10000];
	double temp = 0;
	double start1 = omp_get_wtime();
	#pragma omp parallel for
	for(int i=0;i<10000;i++){
        arr1[i]= i +2.0;
        }
	#pragma omp parllel for
        for(int i=10000;i>0;i--){
        arr2[i] = i+4.0;
        }
	double end1 = omp_get_wtime();
	double start2 = omp_get_wtime();
	#pragma omp parallel for reduction(+:temp)
	for(int i=0;i<10000;i++){
	double tempdot = arr1[i] * arr2[i];
	temp = temp + tempdot;
	}
	double end2 = omp_get_wtime();
	printf("Scaler sum %f\n",temp);
	printf("First For Loop Time1 %f\n",end1-start1);
	printf("Second For Loop Time2 %f\n",end2-start2);
	printf("Total Time for parallel Execution %f\n",(end2-start2) + (end1-start1));
	return 0;
}

==============================================================================================================================================================

Q2

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void matrix_add(double *A, double *B, double *C, int n, int num_threads) {
    int i, j;
    #pragma omp parallel for num_threads(num_threads) collapse(2)
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            C[i*n + j] = A[i*n + j] + B[i*n + j];
        }
    }
}
int main() {
    int sizes[] = {250, 500, 750, 1000, 2000};
    int threads_arr[] = {1, 2, 4, 8};
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);
    int num_threads_arr = sizeof(threads_arr) / sizeof(threads_arr[0]);

    for (int s = 0; s < num_sizes; s++) {
        int n = sizes[s];
        printf("Matrix size: %d x %d\n", n, n);

        double *A = malloc(n * n * sizeof(double));
        double *B = malloc(n * n * sizeof(double));
        double *C = malloc(n * n * sizeof(double));
        if (!A || !B || !C) {
            printf("Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }

        for (int i = 0; i < n * n; i++) {
            A[i] = 1.0;
            B[i] = 2.0;
        }

        double baseline_time = 0.0;

        for (int t = 0; t < num_threads_arr; t++) {
            int num_threads = threads_arr[t];
            double start = omp_get_wtime();
            matrix_add(A, B, C, n, num_threads);
            double time_taken = omp_get_wtime() - start;

            if (num_threads == 1) {
                baseline_time = time_taken;
            }
            double speedup = (num_threads == 1) ? 1.0 : baseline_time / time_taken;
            printf("Threads: %d, Time: %f sec, Speedup: %f\n", num_threads, time_taken, speedup);
        }
        printf("\n");
        free(A);
        free(B);
        free(C);
    }
    return 0;
}

==============================================================================================================================================================

Q3

#include<stdio.h>
#include<omp.h>
#include<stdlib.h>
void chunksizestatic(int size){
long long num_terms = 200;
         double *arr = (double *)malloc(num_terms * sizeof(double));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
         }
        double start,end;
	start = omp_get_wtime();
	#pragma omp parallel for schedule(static,size)
	for(int i=0;i<num_terms;i++){
                arr[i] = arr[i] + 10.098;
        }
        end = omp_get_wtime();
        printf("Chunk Size : %d \t Time required for Execution : %f\n\n",size,end-start);
}
void chunksizedynamic(int size){
long long num_terms = 200;
         double *arr = (double *)malloc(num_terms * sizeof(double));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
         }
        double start,end;
        start = omp_get_wtime();
        #pragma omp parallel for schedule(dynamic,size)
        for(int i=0;i<num_terms;i++){
                arr[i] = arr[i] + 10.098;
        }
        end = omp_get_wtime();
        printf("Chunk Size : %d \t Time required for Execution : %f\n\n",size,end-start);
}
void chunksizenowait(){
long long num_terms = 200;
         double *arr = (double *)malloc(num_terms * sizeof(double));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
         }
        double start,end;
        start = omp_get_wtime();
        #pragma omp parallel
	{
	#pragma omp for nowait	
        for(int i=0;i<num_terms;i++){
                arr[i] = arr[i] + 10.098;
        }
	}
        end = omp_get_wtime();
        printf("Time required for Execution : %f\n\n",end-start);
}
int main(){
	int chunksize[] = {1,5,10,15,20};
	printf("\nStatic\n\n");
	for(int i=0;i<5;i++){
		chunksizestatic(chunksize[i]);	
	}
	printf("\n\tDynamic\n\n");
        for(int i=0;i<5;i++){
                chunksizestatic(chunksize[i]);
        }
	printf("\n\tNowait\n\n");
	chunksizenowait();
        return 0;
}
==============================================================================================================================================================
